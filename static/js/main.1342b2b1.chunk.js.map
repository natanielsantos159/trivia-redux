{"version":3,"sources":["images/trivia.png","images/star-solid.svg","images/star-solid-black.svg","actions/index.js","reducers/loginReducer.js","reducers/gameReducer.js","reducers/tokenReducer.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.js","components/QuestionCard.js","components/Answers.js","pages/Game.js","pages/Feedback.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","failedRequest","payload","type","INITIAL_STATE","email","name","loginReducer","state","action","INICIAL_STATE","triviaReturn","gameReducer","token","tokenReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Login","handleChange","bind","toPlay","target","value","this","setState","a","props","tokenAPI","history","setUser","push","className","src","logo","alt","htmlFor","id","data-testid","onChange","disabled","onClick","Component","connect","dispatch","fetch","response","json","data","localStorage","setItem","Header","picture","getGravatarPicture","hash","md5","toString","score","to","QuestionCard","string","unescape","encodeURIComponent","replace","results","category","encodeUtf8","question","defaultProps","undefined","Answers","answers","clicked","map","index","answer","correct","key","Game","counter","timer","player","assertions","gravatarEmail","gameTimer","handleCounter","shuffleArray","getAnswers","handleQuestionTimer","handleAnswerClick","handleCorrectChange","triviaApi","then","JSON","stringify","clearInterval","reduce","acc","result","incorrectAnswers","incorrect_answers","currAnswers","correct_answer","shuffledArray","array","randomIndex","currentIndex","length","Math","floor","random","setInterval","difficulty","prevState","classList","contains","questionCard","document","querySelector","answersContainer","style","display","setTimeout","Feedback","getState","parse","getItem","Array","fill","starIcon","starIconBlack","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1342b2b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","module.exports = __webpack_public_path__ + \"static/media/star-solid.2caa74cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/star-solid-black.83dae189.svg\";","export const SET_LOGIN_VALUE = 'SET_LOGIN_VALUE';\nexport const SET_TOKEN_VALUE = 'SET_TOKEN_VALUE';\nexport const SET_TRIVIA_VALUE = 'SET_TRIVIA_VALUE';\nexport const FAILED_REQUEST = 'FAILED_REQUEST';\n\nexport const setUserLogin = (payload) => (\n  {\n    type: SET_LOGIN_VALUE, payload,\n  }\n);\n\nexport const setTriviaRequest = (payload) => ({\n  type: SET_TRIVIA_VALUE, payload,\n});\n\nexport const failedRequest = (payload) => ({\n  type: FAILED_REQUEST, payload,\n});\n\nexport const setTokenRequest = (payload) => ({\n  type: SET_TOKEN_VALUE, payload,\n});\n\nexport const fetchToken = () => async (dispatch) => {\n  try {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await response.json();\n    const { token } = data;\n    localStorage.setItem('token', token);\n    return dispatch(setTokenRequest(token));\n  } catch (error) {\n    dispatch(failedRequest(error));\n  }\n};\n\nexport const fetchTriviaQuestions = () => async (dispatch) => {\n  try {\n    const { token } = localStorage;\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    return dispatch(setTriviaRequest(data));\n  } catch (error) {\n    dispatch(failedRequest(error));\n  }\n};\n","import { SET_LOGIN_VALUE } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  name: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_LOGIN_VALUE:\n    return {\n      ...state,\n      ...action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import { SET_TRIVIA_VALUE } from '../actions';\n\nconst INICIAL_STATE = {\n  triviaReturn: {},\n};\n\nconst gameReducer = (state = INICIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_TRIVIA_VALUE:\n    return { ...state, triviaReturn: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default gameReducer;\n","import { SET_TOKEN_VALUE } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nconst tokenReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_TOKEN_VALUE:\n    return {\n      ...state,\n      token: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './loginReducer';\nimport gameReducer from './gameReducer';\nimport tokenReducer from './tokenReducer';\n\nconst rootReducer = combineReducers({ loginReducer, gameReducer, tokenReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchToken, setUserLogin } from '../actions';\nimport '../styles/Login.css';\nimport logo from '../images/trivia.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      name: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.toPlay = this.toPlay.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  async toPlay() {\n    const { tokenAPI, history, setUser } = this.props;\n    const { email, name } = this.state;\n    await tokenAPI();\n    setUser({ email, name });\n    history.push('/game');\n  }\n\n  render() {\n    const { email, name } = this.state;\n    return (\n      <>\n        <img className=\"login-trivia-logo\" src={ logo } alt=\"Trivia Logo\" />\n        <section className=\"login-section\">\n          <form>\n            <label htmlFor=\"emailInput\">\n              E-mail:\n              <input\n                id=\"emailInput\"\n                name=\"email\"\n                type=\"email\"\n                data-testid=\"input-gravatar-email\"\n                onChange={ this.handleChange }\n                value={ email }\n              />\n            </label>\n            <label htmlFor=\"nameInput\">\n              Name:\n              <input\n                id=\"nameInput\"\n                name=\"name\"\n                type=\"text\"\n                data-testid=\"input-player-name\"\n                onChange={ this.handleChange }\n                value={ name }\n              />\n            </label>\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              className=\"btn-play\"\n              disabled={ !(name && email) }\n              onClick={ this.toPlay }\n            >\n              Jogar\n            </button>\n          </form>\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  tokenAPI: () => dispatch(fetchToken()),\n  setUser: (state) => dispatch(setUserLogin(state)),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.tokenReducer.token,\n});\n\nLogin.propTypes = {\n  tokenAPI: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  setUser: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport '../styles/Header.css';\nimport { Link } from 'react-router-dom';\nimport logo from '../images/trivia.png';\n\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      picture: '',\n    };\n\n    this.getGravatarPicture = this.getGravatarPicture.bind(this);\n  }\n\n  componentDidMount() {\n    this.getGravatarPicture();\n  }\n\n  getGravatarPicture() {\n    const { email } = this.props;\n    const hash = md5(email).toString();\n    const picture = `https://www.gravatar.com/avatar/${hash}`;\n    this.setState({ picture });\n  }\n\n  render() {\n    const { name, score } = this.props;\n    const { picture } = this.state;\n\n    return (\n      <section className=\"top-container\">\n        <Link to=\"/\">\n          <img className=\"trivia-logo\" src={ logo } alt=\"Trivia Logo\" />\n        </Link>\n        <header>\n          <div className=\"user-info\">\n            <img\n              data-testid=\"header-profile-picture\"\n              className=\"header-profile-picture\"\n              src={ picture }\n              alt=\"profile\"\n            />\n            <span className=\"player-name\">\n              Jogador:\n              {' '}\n              <span data-testid=\"header-player-name\">{ name }</span>\n            </span>\n          </div>\n          <span className=\"player-score\">\n            Pontos:\n            {' '}\n            <span data-testid=\"header-score\">{ score }</span>\n          </span>\n        </header>\n      </section>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.loginReducer.name,\n  email: state.loginReducer.email,\n});\n\nexport default connect(\n  mapStateToProps,\n)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class QuestionCard extends Component {\n  encodeUtf8(string) {\n    // função do Lucas Rodrigues Turma 08\n    const stringUTF = unescape(encodeURIComponent(string));\n    return stringUTF.replace(/&quot;|&#039;/gi, '\\'');\n  }\n\n  render() {\n    const { results } = this.props;\n    return (\n      <section className=\"question-card\">\n        <section className=\"category-section\">\n          <span data-testid=\"question-category\">\n            { results ? `Category: ${results.category} ` : 'Category: ' }\n          </span>\n        </section>\n        <br />\n        <div data-testid=\"question-text\" className=\"question-text\">\n          { results ? `Question: ${this.encodeUtf8(results.question)} ` : 'Question: ' }\n        </div>\n        <br />\n      </section>\n    );\n  }\n}\n\nQuestionCard.propTypes = {\n  results: PropTypes.shape({\n    category: PropTypes.string,\n    correct_answer: PropTypes.string,\n    question: PropTypes.string,\n  }),\n};\n\nQuestionCard.defaultProps = {\n  results: undefined,\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nexport default class Answers extends Component {\n  encodeUtf8(string) {\n    // função do Lucas Rodrigues Turma 08\n    const stringUTF = unescape(encodeURIComponent(string));\n    return stringUTF.replace(/&quot;|&#039;/gi, '\\'');\n  }\n\n  render() {\n    const { onClick, answers, disabled, clicked } = this.props;\n    return (\n      <section className=\"answers-container\">\n        { answers.map(({ answer, correct }, index) => (\n          <button\n            type=\"button\"\n            data-testid={ correct ? 'correct-answer' : `wrong-answer-${index}` }\n            className={ `answer ${correct ? 'correct' : 'incorrect'} ${clicked && 'clicked'}` }\n            key={ index }\n            onClick={ onClick }\n            disabled={ disabled }\n          >\n            { this.encodeUtf8(answer) }\n          </button>\n        ))}\n      </section>\n    );\n  }\n}\n\nAnswers.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  answers: PropTypes.arrayOf(PropTypes.object),\n  disabled: PropTypes.bool.isRequired,\n  clicked: PropTypes.bool.isRequired,\n};\n\nAnswers.defaultProps = {\n  answers: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchTriviaQuestions } from '../actions';\nimport '../styles/Game.css';\nimport Header from '../components/Header';\nimport QuestionCard from '../components/QuestionCard';\nimport '../styles/QuestionCard.css';\nimport Answers from '../components/Answers';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    const { email, name } = props;\n\n    this.state = {\n      answers: [],\n      counter: 0,\n      timer: 30,\n      state: {\n        player: {\n          name,\n          assertions: 0,\n          score: 0,\n          gravatarEmail: email,\n        },\n      },\n      clicked: false,\n    };\n    this.gameTimer = null;\n    this.handleCounter = this.handleCounter.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.getAnswers = this.getAnswers.bind(this);\n    this.handleQuestionTimer = this.handleQuestionTimer.bind(this);\n    this.handleAnswerClick = this.handleAnswerClick.bind(this);\n    this.handleCorrectChange = this.handleCorrectChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { triviaApi } = this.props;\n    const { state } = this.state;\n\n    triviaApi()\n      .then(() => this.getAnswers());\n    this.handleQuestionTimer();\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  componentDidUpdate() {\n    const { state } = this.state;\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  componentWillUnmount() {\n    const { timer } = this.state;\n    clearInterval(timer);\n  }\n\n  getAnswers() {\n    const { triviaReturn: { results } } = this.props;\n    const answers = results.reduce((acc, result) => {\n      const incorrectAnswers = result.incorrect_answers.map((answer) => ({ answer,\n        correct: false }));\n      const currAnswers = [{ answer: result.correct_answer, correct: true },\n        ...incorrectAnswers];\n      const shuffledArray = this.shuffleArray(currAnswers);\n      acc.push(shuffledArray);\n      return acc;\n    }, []);\n\n    this.setState({ answers });\n  }\n\n  // Função de embaralhar array retirada do link: https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/.\n  shuffleArray(array) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n\n  handleQuestionTimer() {\n    const interval = 1000;\n    const thirty = 31;\n    let timer = thirty;\n    this.gameTimer = setInterval(() => {\n      if (timer > 0) {\n        timer -= 1;\n        this.setState({\n          timer,\n        });\n      }\n    }, interval);\n    return timer;\n  }\n\n  handleCorrectChange() {\n    const { timer, counter } = this.state;\n    const { triviaReturn: { results }, email, name } = this.props;\n\n    let difficulty = 0;\n    if (results[counter].difficulty === 'easy') {\n      difficulty = 1;\n    }\n    if (results[counter].difficulty === 'medium') {\n      difficulty = 2;\n    }\n    if (results[counter].difficulty === 'hard') {\n      const three = 3;\n      difficulty = three;\n    }\n    const ten = 10;\n    this.setState((prevState) => ({\n      state: {\n        player: {\n          name,\n          assertions: prevState.state.player.assertions + 1,\n          score: prevState.state.player.score + (ten + (timer * difficulty)),\n          gravatarEmail: email,\n        },\n      },\n    }));\n  }\n\n  handleAnswerClick({ target }) {\n    const { clicked } = this.state;\n\n    if (!clicked) this.setState({ clicked: true });\n\n    if (target.classList.contains('correct')) this.handleCorrectChange();\n  }\n\n  handleCounter() {\n    const { counter } = this.state;\n    const { history } = this.props;\n    const questionCard = document.querySelector('.question-card');\n    const answersContainer = document.querySelector('.answers-container');\n    const four = 4;\n\n    if (counter === four) {\n      history.push('/feedback');\n    }\n\n    questionCard.style.display = 'none';\n    answersContainer.style.display = 'none';\n\n    this.setState((prevState) => ({\n      counter: prevState.counter + 1,\n      clicked: false,\n    }));\n\n    clearInterval(this.gameTimer);\n    this.handleQuestionTimer();\n\n    setTimeout(() => {\n      questionCard.style.display = 'block';\n      answersContainer.style.display = 'flex';\n    }, 100);\n  }\n\n  render() {\n    const { counter, timer, answers, state, clicked } = this.state;\n    const { triviaReturn: { results } } = this.props;\n    return (\n      <section>\n        <Header score={ state.player.score } />\n        <section className=\"content-container\">\n          <QuestionCard results={ results ? results[counter] : {} } />\n          <Answers\n            clicked={ clicked }\n            answers={ answers[counter] }\n            disabled={ timer === 0 }\n            onClick={ this.handleAnswerClick }\n          />\n        </section>\n        <section className=\"bottom-container\">\n          <span>\n            { timer <= 1 ? `Tempo restante: ${timer} segundo`\n              : `Tempo restante: ${timer} segundos` }\n          </span>\n          <button\n            type=\"button\"\n            className={`next-question-btn ${(timer === 0 || clicked) && 'visible'}`}\n            data-testid=\"btn-next\"\n            onClick={ this.handleCounter }\n          >\n            Próxima\n          </button>\n        </section>\n      </section>\n    );\n  }\n}\n\nGame.propTypes = {\n  triviaApi: PropTypes.func.isRequired,\n  triviaReturn: PropTypes.shape({\n    response_code: PropTypes.number,\n    results: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  triviaApi: () => dispatch(fetchTriviaQuestions()),\n});\n\nconst mapStateToProps = (state) => ({\n  triviaReturn: state.gameReducer.triviaReturn,\n  email: state.loginReducer.email,\n  name: state.loginReducer.name,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport '../styles/Feedback.css';\nimport starIcon from '../images/star-solid.svg';\nimport starIconBlack from '../images/star-solid-black.svg';\n\nexport default class Feedback extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      state: {\n        player: {\n          assertions: 0,\n          score: 0,\n        },\n      },\n    };\n\n    this.getState = this.getState.bind(this);\n  }\n\n  componentDidMount() {\n    this.getState();\n  }\n\n  getState() {\n    const state = JSON.parse(localStorage.getItem('state'));\n    this.setState({ state });\n  }\n\n  render() {\n    const { state } = this.state;\n    const three = 3;\n    return (\n      <>\n        <Header score={ state.player.score } />\n        <div className=\"feedback-container\">\n          <div className=\"result-header\">\n            <p>Resultado</p>\n          </div>\n          <div className=\"result-body\">\n            <span className=\"feedback-total-score\">\n              { state.player.score }\n            </span>\n            <div className=\"stars\">\n              { new Array(5)\n                .fill(<img src={ starIcon } alt=\"Star Icon\" className=\"star\" />, 0, state.player.assertions)\n                .fill(<img src={ starIconBlack } alt=\"Star Icon Black\" className=\"star\" />, state.player.assertions) }\n            </div>\n            { state.player.assertions > 0 ? <p>\n              Você acertou\n              <span className=\"feedback-total-question\">\n                { ` ${state.player.assertions} ` }\n              </span>\n              { state.player.assertions > 1 ? 'perguntas' : 'pergunta' }\n            </p> : 'Você não acertou nenhuma questão :('}\n            <p\n              className=\"feedback-text\"\n            >\n              { state.player.assertions >= three ? 'Mandou bem! 🎉' : 'Podia ser melhor...'}\n            </p>\n          </div>\n          <Link to=\"/game\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              className=\"btn-play\"\n            >\n              Play again!\n            </button>\n          </Link>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/feedback\" component={ Feedback } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"trivia-redux\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change.\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}