{"version":3,"sources":["images/trivia.png","images/sliders-h-solid (1).svg","actions/index.js","reducers/loginReducer.js","reducers/gameReducer.js","reducers/tokenReducer.js","reducers/index.js","store/index.js","components/SettingsButton.js","pages/Login.js","pages/Settings.js","components/Header.js","components/QuestionCard.js","components/Answers.js","pages/Game.js","pages/Feedback.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","failedRequest","payload","type","INITIAL_STATE","email","name","loginReducer","state","action","INICIAL_STATE","triviaReturn","gameReducer","token","tokenReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","SettingsButton","to","data-testid","className","src","settings","alt","Component","Login","handleChange","bind","toPlay","target","value","this","setState","a","props","tokenAPI","history","setUser","push","logo","htmlFor","id","onChange","disabled","onClick","connect","dispatch","fetch","response","json","data","localStorage","setItem","Settings","Header","picture","getGravatarPicture","hash","md5","toString","score","QuestionCard","results","category","question","defaultProps","undefined","Answers","answers","map","index","answer","correct","key","Game","counter","timer","player","assertions","gravatarEmail","gameTimer","handleCounter","shuffleArray","getAnswers","handleQuestionTimer","handleAnswerClick","handleCorrectChange","triviaApi","then","JSON","stringify","clearInterval","reduce","acc","result","incorrectAnswers","incorrect_answers","currAnswers","correct_answer","shuffledArray","array","randomIndex","currentIndex","length","Math","floor","random","setInterval","difficulty","prevState","alreadClicked","document","querySelector","querySelectorAll","classList","add","forEach","contains","questionCard","answersContainer","remove","style","display","setTimeout","Feedback","getState","parse","getItem","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.511d148e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","module.exports = __webpack_public_path__ + \"static/media/sliders-h-solid (1).b5adcc53.svg\";","export const SET_LOGIN_VALUE = 'SET_LOGIN_VALUE';\nexport const SET_TOKEN_VALUE = 'SET_TOKEN_VALUE';\nexport const SET_TRIVIA_VALUE = 'SET_TRIVIA_VALUE';\nexport const FAILED_REQUEST = 'FAILED_REQUEST';\n\nexport const setUserLogin = (payload) => (\n  {\n    type: SET_LOGIN_VALUE, payload,\n  }\n);\n\nexport const setTriviaRequest = (payload) => ({\n  type: SET_TRIVIA_VALUE, payload,\n});\n\nexport const failedRequest = (payload) => ({\n  type: FAILED_REQUEST, payload,\n});\n\nexport const setTokenRequest = (payload) => ({\n  type: SET_TOKEN_VALUE, payload,\n});\n\nexport const fetchToken = () => async (dispatch) => {\n  try {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await response.json();\n    const { token } = data;\n    localStorage.setItem('token', token);\n    return dispatch(setTokenRequest(token));\n  } catch (error) {\n    dispatch(failedRequest(error));\n  }\n};\n\nexport const fetchTriviaQuestions = () => async (dispatch) => {\n  try {\n    const { token } = localStorage;\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    return dispatch(setTriviaRequest(data));\n  } catch (error) {\n    dispatch(failedRequest(error));\n  }\n};\n","import { SET_LOGIN_VALUE } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  name: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_LOGIN_VALUE:\n    return {\n      ...state,\n      ...action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import { SET_TRIVIA_VALUE } from '../actions';\n\nconst INICIAL_STATE = {\n  triviaReturn: {},\n};\n\nconst gameReducer = (state = INICIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_TRIVIA_VALUE:\n    return { ...state, triviaReturn: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default gameReducer;\n","import { SET_TOKEN_VALUE } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nconst tokenReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_TOKEN_VALUE:\n    return {\n      ...state,\n      token: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './loginReducer';\nimport gameReducer from './gameReducer';\nimport tokenReducer from './tokenReducer';\n\nconst rootReducer = combineReducers({ loginReducer, gameReducer, tokenReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport settings from '../images/sliders-h-solid (1).svg';\n\nexport default class SettingsButton extends Component {\n  render() {\n    return (\n      <Link to=\"/settings\">\n        <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          className=\"btn-settings\"\n        >\n          {/* License: https://fontawesome.com/license/free */}\n          <img className=\"settings-icon\" src={ settings } alt=\"Configurações\" />\n        </button>\n      </Link>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchToken, setUserLogin } from '../actions';\nimport '../styles/Login.css';\nimport logo from '../images/trivia.png';\nimport SettingsButton from '../components/SettingsButton';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      name: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.toPlay = this.toPlay.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  async toPlay() {\n    const { tokenAPI, history, setUser } = this.props;\n    const { email, name } = this.state;\n    await tokenAPI();\n    setUser({ email, name });\n    history.push('/game');\n  }\n\n  render() {\n    const { email, name } = this.state;\n    return (\n      <>\n        <img className=\"login-trivia-logo\" src={ logo } alt=\"Trivia Logo\" />\n        <section className=\"login-section\">\n          <SettingsButton />\n          <form>\n            <label htmlFor=\"emailInput\">\n              E-mail:\n              <input\n                id=\"emailInput\"\n                name=\"email\"\n                type=\"email\"\n                data-testid=\"input-gravatar-email\"\n                onChange={ this.handleChange }\n                value={ email }\n              />\n            </label>\n            <label htmlFor=\"nameInput\">\n              Name:\n              <input\n                id=\"nameInput\"\n                name=\"name\"\n                type=\"text\"\n                data-testid=\"input-player-name\"\n                onChange={ this.handleChange }\n                value={ name }\n              />\n            </label>\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              className=\"btn-play\"\n              disabled={ !(name && email) }\n              onClick={ this.toPlay }\n            >\n              Jogar\n            </button>\n          </form>\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  tokenAPI: () => dispatch(fetchToken()),\n  setUser: (state) => dispatch(setUserLogin(state)),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.tokenReducer.token,\n});\n\nLogin.propTypes = {\n  tokenAPI: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  setUser: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\r\n\r\nclass Settings extends Component {\r\n  render() {\r\n    return (\r\n      <section>\r\n        <h1 data-testid=\"settings-title\"> Configurações </h1>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Settings;\r\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport '../styles/Header.css';\nimport { Link } from 'react-router-dom';\nimport logo from '../images/trivia.png';\nimport SettingsButton from './SettingsButton';\n\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      picture: '',\n    };\n\n    this.getGravatarPicture = this.getGravatarPicture.bind(this);\n  }\n\n  componentDidMount() {\n    this.getGravatarPicture();\n  }\n\n  getGravatarPicture() {\n    const { email } = this.props;\n    const hash = md5(email).toString();\n    const picture = `https://www.gravatar.com/avatar/${hash}`;\n    this.setState({ picture });\n  }\n\n  render() {\n    const { name, score } = this.props;\n    const { picture } = this.state;\n\n    return (\n      <section className=\"top-container\">\n        <Link to=\"/\">\n          <img className=\"trivia-logo\" src={ logo } alt=\"Trivia Logo\" />\n        </Link>\n        <header>\n          <div className=\"user-info\">\n            <img\n              data-testid=\"header-profile-picture\"\n              className=\"header-profile-picture\"\n              src={ picture }\n              alt=\"profile\"\n            />\n            <span className=\"player-name\">\n              Jogador:\n              {' '}\n              <span data-testid=\"header-player-name\">{ name }</span>\n            </span>\n          </div>\n          <span className=\"player-score\">\n            Pontos:\n            {' '}\n            <span data-testid=\"header-score\">{ score }</span>\n          </span>\n          <SettingsButton />\n        </header>\n      </section>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.loginReducer.name,\n  email: state.loginReducer.email,\n});\n\nexport default connect(\n  mapStateToProps,\n)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class QuestionCard extends Component {\n  render() {\n    const { results } = this.props;\n    return (\n      <section className=\"question-card\">\n        <section className=\"category-section\">\n          <span data-testid=\"question-category\">\n            { results ? `Category: ${results.category} ` : 'Category: ' }\n          </span>\n        </section>\n        <br />\n        <div data-testid=\"question-text\" className=\"question-text\">\n          { results ? `Question: ${results.question} ` : 'Question: ' }\n        </div>\n        <br />\n      </section>\n    );\n  }\n}\n\nQuestionCard.propTypes = {\n  results: PropTypes.shape({\n    category: PropTypes.string,\n    correct_answer: PropTypes.string,\n    question: PropTypes.string,\n  }),\n};\n\nQuestionCard.defaultProps = {\n  results: undefined,\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nexport default class Answers extends Component {\n  render() {\n    const { onClick, answers, disabled } = this.props;\n    return (\n      <section className=\"answers-container\">\n        { answers.map(({ answer, correct }, index) => (\n          <button\n            type=\"button\"\n            data-testid={ correct ? 'correct-answer' : `wrong-answer-${index}` }\n            className={ `answer ${correct ? 'correct' : 'incorrect'}` }\n            key={ index }\n            onClick={ onClick }\n            disabled={ disabled }\n          >\n            { answer }\n          </button>\n        ))}\n      </section>\n    );\n  }\n}\n\nAnswers.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  answers: PropTypes.arrayOf(PropTypes.object),\n  disabled: PropTypes.bool.isRequired,\n};\n\nAnswers.defaultProps = {\n  answers: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchTriviaQuestions } from '../actions';\nimport '../styles/Game.css';\nimport Header from '../components/Header';\nimport QuestionCard from '../components/QuestionCard';\nimport '../styles/QuestionCard.css';\nimport Answers from '../components/Answers';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    const { email, name } = props;\n\n    this.state = {\n      answers: [],\n      counter: 0,\n      timer: 30,\n      state: {\n        player: {\n          name,\n          assertions: 0,\n          score: 0,\n          gravatarEmail: email,\n        },\n      },\n      /*       ranking: {\n        name: '',\n        score: 10,\n        picture: '',\n      }, */\n    };\n    this.gameTimer = null;\n    this.handleCounter = this.handleCounter.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.getAnswers = this.getAnswers.bind(this);\n    this.handleQuestionTimer = this.handleQuestionTimer.bind(this);\n    this.handleAnswerClick = this.handleAnswerClick.bind(this);\n    this.handleCorrectChange = this.handleCorrectChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { triviaApi } = this.props;\n    const { state } = this.state;\n\n    triviaApi()\n      .then(() => this.getAnswers());\n    this.handleQuestionTimer();\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  componentDidUpdate() {\n    const { state } = this.state;\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  componentWillUnmount() {\n    const { timer } = this.state;\n    clearInterval(timer);\n  }\n\n  getAnswers() {\n    const { triviaReturn: { results } } = this.props;\n    const answers = results.reduce((acc, result) => {\n      const incorrectAnswers = result.incorrect_answers.map((answer) => ({ answer,\n        correct: false }));\n      const currAnswers = [{ answer: result.correct_answer, correct: true },\n        ...incorrectAnswers];\n      const shuffledArray = this.shuffleArray(currAnswers);\n      acc.push(shuffledArray);\n      return acc;\n    }, []);\n\n    this.setState({ answers });\n  }\n\n  // Função de embaralhar array retirada do link: https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/.\n  shuffleArray(array) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n\n  handleQuestionTimer() {\n    const interval = 1000;\n    const thirty = 31;\n    let timer = thirty;\n    this.gameTimer = setInterval(() => {\n      if (timer > 0) {\n        timer -= 1;\n        this.setState({\n          timer,\n        });\n      }\n    }, interval);\n    return timer;\n  }\n\n  async handleCorrectChange() {\n    const { timer, counter } = this.state;\n    const { triviaReturn: { results }, email, name } = this.props;\n\n    let difficulty = 0;\n    if (results[counter].difficulty === 'easy') {\n      difficulty = 1;\n    }\n    if (results[counter].difficulty === 'medium') {\n      difficulty = 2;\n    }\n    if (results[counter].difficulty === 'hard') {\n      const three = 3;\n      difficulty = three;\n    }\n    const ten = 10;\n    this.setState((prevState) => ({\n      state: {\n        player: {\n          name,\n          assertions: prevState.state.player.assertions + 1,\n          score: prevState.state.player.score + (ten + (timer * difficulty)),\n          gravatarEmail: email,\n        },\n      },\n    }));\n  }\n\n  handleAnswerClick({ target }) {\n    const alreadClicked = document.querySelector('.clicked') !== null;\n    const answers = document.querySelectorAll('.answer');\n    const nextBtn = document.querySelector('.next-question-btn');\n    nextBtn.classList.add('visible');\n\n    if (!alreadClicked) {\n      [...answers].forEach((answer) => answer.classList.add('clicked'));\n    }\n\n    if (target.classList.contains('correct')) this.handleCorrectChange();\n  }\n\n  handleCounter() {\n    const { counter } = this.state;\n    const { history } = this.props;\n    const questionCard = document.querySelector('.question-card');\n    const answersContainer = document.querySelector('.answers-container');\n    const answers = document.querySelectorAll('.answer');\n    const four = 4;\n\n    if (counter === four) {\n      history.push('/feedback');\n    }\n\n    document.querySelector('.next-question-btn').classList.remove('visible');\n    questionCard.style.display = 'none';\n    answersContainer.style.display = 'none';\n\n    this.setState((prevState) => ({ counter: prevState.counter + 1 }));\n\n    clearInterval(this.gameTimer);\n    this.handleQuestionTimer();\n\n    setTimeout(() => {\n      questionCard.style.display = 'block';\n      answersContainer.style.display = 'flex';\n      [...answers].forEach((answer) => answer.classList.remove('clicked'));\n    }, 100);\n  }\n\n  render() {\n    const { counter, timer, answers, state } = this.state;\n    const { triviaReturn: { results } } = this.props;\n    return (\n      <section>\n        <Header score={ state.player.score } />\n        <section className=\"content-container\">\n          <QuestionCard results={ results ? results[counter] : {} } />\n          <Answers\n            answers={ answers[counter] }\n            disabled={ timer === 0 }\n            onClick={ this.handleAnswerClick }\n          />\n        </section>\n        <section className=\"bottom-container\">\n          <span>\n            { timer <= 1 ? `Tempo restante: ${timer} segundo`\n              : `Tempo restante: ${timer} segundos` }\n          </span>\n          <button\n            type=\"button\"\n            className=\"next-question-btn\"\n            data-testid=\"btn-next\"\n            onClick={ this.handleCounter }\n          >\n            Próxima\n          </button>\n        </section>\n      </section>\n    );\n  }\n}\n\nGame.propTypes = {\n  triviaApi: PropTypes.func.isRequired,\n  triviaReturn: PropTypes.shape({\n    response_code: PropTypes.number,\n    results: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  triviaApi: () => dispatch(fetchTriviaQuestions()),\n});\n\nconst mapStateToProps = (state) => ({\n  triviaReturn: state.gameReducer.triviaReturn,\n  email: state.loginReducer.email,\n  name: state.loginReducer.name,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport '../styles/Feedback.css';\n\nexport default class Feedback extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      state: {\n        player: {\n          assertions: 0,\n          score: 0,\n        },\n      },\n    };\n\n    this.getState = this.getState.bind(this);\n  }\n\n  componentDidMount() {\n    this.getState();\n  }\n\n  getState() {\n    const state = JSON.parse(localStorage.getItem('state'));\n    this.setState({ state });\n  }\n\n  render() {\n    const { state } = this.state;\n    const three = 3;\n    return (\n      <>\n        <Header score={ state.player.score } />\n        <main className=\"feedback-container\">\n          <section className=\"result-header\">\n            <p>Resultado</p>\n          </section>\n          <p>\n            Você acertou\n            <span data-testid=\"feedback-total-question\">\n              { ` ${state.player.assertions} ` }\n            </span>\n            perguntas\n          </p>\n          <p>\n            <span data-testid=\"feedback-total-score\">\n              { `${state.player.score} ` }\n            </span>\n            Pontos\n          </p>\n          <p\n            className=\"feedback-text\"\n            data-testid=\"feedback-text\"\n          >\n            { state.player.assertions >= three ? 'Mandou bem!' : 'Podia ser melhor...'}\n          </p>\n          <Link to=\"/\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              className=\"btn-play\"\n            >\n              Play again!\n            </button>\n          </Link>\n        </main>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/feedback\" component={ Feedback } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change.\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}