{"version":3,"sources":["images/trivia.png","images/star-solid.svg","images/star-solid-black.svg","actions/index.js","reducers/loginReducer.js","reducers/gameReducer.js","reducers/tokenReducer.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.js","components/QuestionCard.js","components/Answers.js","pages/Game.js","components/Card.js","pages/Feedback.js","data.js","pages/NewGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setTriviaRequest","payload","type","failedRequest","fetchToken","dispatch","a","fetch","response","json","data","token","localStorage","setItem","defaultOptions","amount","difficulty","category","fetchTriviaQuestions","options","decodedData","results","map","current","decodeURIComponent","question","incorrect_answers","correct_answer","INITIAL_STATE","email","name","loginReducer","state","action","INICIAL_STATE","triviaReturn","gameOptions","gameReducer","tokenReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Login","handleChange","bind","toLogin","target","value","this","setState","props","history","setUser","JSON","stringify","push","className","src","logo","alt","htmlFor","id","data-testid","onChange","disabled","onClick","Component","connect","Header","picture","getGravatarPicture","getUserInfo","parse","getItem","emailProps","nameProps","hash","md5","toString","score","to","QuestionCard","defaultProps","undefined","Answers","answers","clicked","index","answer","correct","key","Game","counter","timer","player","assertions","gravatarEmail","gameTimer","handleNextQuestion","shuffleArray","getAnswers","handleQuestionTimer","handleAnswerClick","handlePontuation","tokenAPI","triviaApi","then","clearInterval","reduce","acc","result","incorrectAnswers","currAnswers","shuffledArray","array","randomIndex","currentIndex","length","Math","floor","random","setInterval","points","easy","medium","hard","prevState","classList","contains","questionCard","document","querySelector","answersContainer","style","display","setTimeout","removeAttribute","handleAnimations","max","Card","title","children","Feedback","getState","getStars","starsAmount","console","log","Array","fill","starIcon","starIconBlack","categories","NewGame","toPlay","setGameOptions","checked","App","exact","path","render","routeProps","component","Boolean","location","hostname","match","ReactDOM","basename","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63850fdd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","module.exports = __webpack_public_path__ + \"static/media/star-solid.2caa74cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/star-solid-black.83dae189.svg\";","export const SET_LOGIN_VALUE = 'SET_LOGIN_VALUE';\nexport const SET_TOKEN_VALUE = 'SET_TOKEN_VALUE';\nexport const SET_TRIVIA_VALUE = 'SET_TRIVIA_VALUE';\nexport const FAILED_REQUEST = 'FAILED_REQUEST';\nexport const SET_OPTIONS = 'SET_OPTIONS';\n\nexport const setUserLogin = (payload) => (\n  {\n    type: SET_LOGIN_VALUE, payload,\n  }\n);\n\nexport const setTriviaRequest = (payload) => ({\n  type: SET_TRIVIA_VALUE, payload,\n});\n\nexport const failedRequest = (payload) => ({\n  type: FAILED_REQUEST, payload,\n});\n\nexport const setTokenRequest = (payload) => ({\n  type: SET_TOKEN_VALUE, payload,\n});\n\nexport const setOptions = (payload) => ({\n  type: SET_OPTIONS, payload,\n});\n\nexport const fetchToken = () => async (dispatch) => {\n  try {\n    const response = await fetch('https://opentdb.com/api_token.php?command=request');\n    const data = await response.json();\n    const { token } = data;\n    localStorage.setItem('token', token);\n    return dispatch(setTokenRequest(token));\n  } catch (error) {\n    dispatch(failedRequest(error));\n  }\n};\n\nexport const defaultOptions = {\n  amount: 5,\n  difficulty: 'easy',\n  category: 'any',\n  type: 'multiple',\n};\n\nexport const fetchTriviaQuestions = (options = defaultOptions) => async (dispatch) => {\n  try {\n    const { amount, difficulty, category, type } = options;\n    const { token } = localStorage;\n    const response = await fetch(`https://opentdb.com/api.php?amount=${amount}&token=${token}&difficulty=${difficulty}&type=${type}&${category !== 'any' && `category=${category}`}&encode=url3986`);\n    const data = await response.json();\n    const decodedData = data.results.map((current) => (\n      {\n        ...current,\n        category: decodeURIComponent(current.category),\n        question: decodeURIComponent(current.question),\n        incorrect_answers: current.incorrect_answers.map(decodeURIComponent),\n        correct_answer: decodeURIComponent(current.correct_answer),\n      }\n    ));\n\n    return dispatch(setTriviaRequest({ results: decodedData }));\n  } catch (error) {\n    dispatch(failedRequest(error));\n  }\n};\n","import { SET_LOGIN_VALUE } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  name: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_LOGIN_VALUE:\n    return {\n      ...state,\n      ...action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import { SET_TRIVIA_VALUE, SET_OPTIONS, defaultOptions } from '../actions';\n\nconst INICIAL_STATE = {\n  triviaReturn: {},\n  gameOptions: defaultOptions,\n};\n\nconst gameReducer = (state = INICIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_TRIVIA_VALUE:\n    return { ...state, triviaReturn: action.payload };\n  case SET_OPTIONS:\n    return { ...state, gameOptions: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default gameReducer;\n","import { SET_TOKEN_VALUE } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nconst tokenReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_TOKEN_VALUE:\n    return {\n      ...state,\n      token: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './loginReducer';\nimport gameReducer from './gameReducer';\nimport tokenReducer from './tokenReducer';\n\nconst rootReducer = combineReducers({ loginReducer, gameReducer, tokenReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { setUserLogin } from '../actions';\nimport '../styles/Login.css';\nimport logo from '../images/trivia.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      name: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.toLogin = this.toLogin.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  toLogin() {\n    const { history, setUser } = this.props;\n    const { email, name } = this.state;\n    setUser({ email, name });\n    localStorage.setItem('trivia-user', JSON.stringify({ email, name }));\n    history.push('/newgame');\n  }\n\n  render() {\n    const { email, name } = this.state;\n    return (\n      <>\n        <img className=\"login-trivia-logo\" src={ logo } alt=\"Trivia Logo\" />\n        <section className=\"login-section\">\n          <form>\n            <label htmlFor=\"emailInput\">\n              E-mail:\n              <input\n                id=\"emailInput\"\n                name=\"email\"\n                type=\"email\"\n                data-testid=\"input-gravatar-email\"\n                onChange={ this.handleChange }\n                value={ email }\n              />\n            </label>\n            <label htmlFor=\"nameInput\">\n              Name:\n              <input\n                id=\"nameInput\"\n                name=\"name\"\n                type=\"text\"\n                data-testid=\"input-player-name\"\n                onChange={ this.handleChange }\n                value={ name }\n              />\n            </label>\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              className=\"btn-play\"\n              disabled={ !(name && email) }\n              onClick={ this.toLogin }\n            >\n              Entrar\n            </button>\n          </form>\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setUser: (state) => dispatch(setUserLogin(state)),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.tokenReducer.token,\n});\n\nLogin.propTypes = {\n  setUser: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport '../styles/Header.css';\nimport { Link } from 'react-router-dom';\nimport logo from '../images/trivia.png';\n\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      picture: '',\n      email: '',\n      name: '',\n    };\n\n    this.getGravatarPicture = this.getGravatarPicture.bind(this);\n    this.getUserInfo = this.getUserInfo.bind(this);\n  }\n\n  componentDidMount() {\n    this.getUserInfo();\n  }\n\n  getUserInfo() {\n    const { email, name } = JSON.parse(localStorage.getItem('trivia-user')) || {};\n    if (email && name) {\n      this.setState({ email, name }, this.getGravatarPicture);\n    } else {\n      const { email: emailProps, name: nameProps } = this.props;\n      this.setState({ email: emailProps, name: nameProps }, this.getGravatarPicture);\n    }\n  }\n\n  getGravatarPicture() {\n    const { email } = this.state;\n    const hash = md5(email).toString();\n    const picture = `https://www.gravatar.com/avatar/${hash}`;\n    this.setState({ picture });\n  }\n\n  render() {\n    const { name, picture } = this.state;\n    const { score } = this.props;\n\n    return (\n      <section className=\"top-container\">\n        <Link to=\"/\">\n          <img className=\"trivia-logo\" src={ logo } alt=\"Trivia Logo\" />\n        </Link>\n        <header>\n          <div className=\"user-info\">\n            <img\n              data-testid=\"header-profile-picture\"\n              className=\"header-profile-picture\"\n              src={ picture }\n              alt=\"profile\"\n            />\n            <span className=\"player-name\">\n              Jogador:\n              {' '}\n              <span data-testid=\"header-player-name\">{ name }</span>\n            </span>\n          </div>\n          <span className=\"player-score\">\n            Pontos:\n            {' '}\n            <span data-testid=\"header-score\" className=\"header-score\">{ score }</span>\n          </span>\n        </header>\n      </section>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.loginReducer.name,\n  email: state.loginReducer.email,\n});\n\nexport default connect(\n  mapStateToProps,\n)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class QuestionCard extends Component {\n  render() {\n    const { results } = this.props;\n    return (\n      <section className=\"question-card\">\n        <section className=\"category-section\">\n          <span data-testid=\"question-category\">\n            { results ? `Category: ${results.category} ` : 'Category: ' }\n          </span>\n        </section>\n        <br />\n        <div data-testid=\"question-text\" className=\"question-text\">\n          { results ? `Question: ${results.question} ` : 'Question: ' }\n        </div>\n        <br />\n      </section>\n    );\n  }\n}\n\nQuestionCard.propTypes = {\n  results: PropTypes.shape({\n    category: PropTypes.string,\n    correct_answer: PropTypes.string,\n    question: PropTypes.string,\n  }),\n};\n\nQuestionCard.defaultProps = {\n  results: undefined,\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport '../styles/Answers.css';\n\nexport default class Answers extends Component {\n  render() {\n    const { onClick, answers, disabled, clicked } = this.props;\n    return (\n      <section className=\"answers-container\">\n        { answers.map(({ answer, correct }, index) => (\n          <button\n            type=\"button\"\n            data-testid={ correct ? 'correct-answer' : `wrong-answer-${index}` }\n            className={ `answer ${correct ? 'correct' : 'incorrect'} ${clicked && 'clicked'}` }\n            key={ index }\n            onClick={ onClick }\n            disabled={ disabled }\n          >\n            { answer }\n          </button>\n        ))}\n      </section>\n    );\n  }\n}\n\nAnswers.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  answers: PropTypes.arrayOf(PropTypes.object),\n  disabled: PropTypes.bool.isRequired,\n  clicked: PropTypes.bool.isRequired,\n};\n\nAnswers.defaultProps = {\n  answers: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchToken, fetchTriviaQuestions } from '../actions';\nimport '../styles/Game.css';\nimport Header from '../components/Header';\nimport QuestionCard from '../components/QuestionCard';\nimport '../styles/QuestionCard.css';\nimport Answers from '../components/Answers';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    const { email, name } = props;\n\n    this.state = {\n      answers: [],\n      counter: 0,\n      timer: 30,\n      state: {\n        player: {\n          name,\n          assertions: 0,\n          score: 0,\n          gravatarEmail: email,\n        },\n      },\n      clicked: false,\n    };\n    this.gameTimer = null;\n    this.handleNextQuestion = this.handleNextQuestion.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.getAnswers = this.getAnswers.bind(this);\n    this.handleQuestionTimer = this.handleQuestionTimer.bind(this);\n    this.handleAnswerClick = this.handleAnswerClick.bind(this);\n    this.handlePontuation = this.handlePontuation.bind(this);\n  }\n\n  componentDidMount() {\n    const { tokenAPI, triviaApi, triviaReturn } = this.props;\n    const { state } = this.state;\n    if (!triviaReturn.results) {\n      tokenAPI().then(() => triviaApi()).then(this.getAnswers);\n    } else {\n      this.getAnswers();\n    }\n\n    this.handleQuestionTimer();\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  componentDidUpdate() {\n    const { state } = this.state;\n\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  componentWillUnmount() {\n    const { timer } = this.state;\n    clearInterval(timer);\n  }\n\n  getAnswers() {\n    const { triviaReturn: { results } } = this.props;\n    const answers = results.reduce((acc, result) => {\n      const incorrectAnswers = result.incorrect_answers.map((answer) => ({ answer,\n        correct: false }));\n      const currAnswers = [{ answer: result.correct_answer, correct: true },\n        ...incorrectAnswers];\n      const shuffledArray = this.shuffleArray(currAnswers);\n      acc.push(shuffledArray);\n      return acc;\n    }, []);\n\n    this.setState({ answers });\n  }\n\n  // Função de embaralhar array retirada do link: https://www.horadecodar.com.br/2021/05/10/como-embaralhar-um-array-em-javascript-shuffle/.\n  shuffleArray(array) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n    return array;\n  }\n\n  handleQuestionTimer() {\n    const interval = 1000;\n    const thirty = 31;\n    let timer = thirty;\n    this.gameTimer = setInterval(() => {\n      if (timer > 0) {\n        timer -= 1;\n        this.setState({\n          timer,\n        });\n      }\n    }, interval);\n    return timer;\n  }\n\n  handlePontuation() {\n    const { timer, counter } = this.state;\n    const { triviaReturn: { results }, email, name } = this.props;\n\n    const points = { easy: 1, medium: 2, hard: 3 };\n    const { difficulty } = results[counter];\n\n    this.setState((prevState) => ({\n      state: {\n        player: {\n          name,\n          assertions: prevState.state.player.assertions + 1,\n          score: prevState.state.player.score + (10 + (timer * points[difficulty])),\n          gravatarEmail: email,\n        },\n      },\n    }));\n  }\n\n  handleAnswerClick({ target }) {\n    const { clicked } = this.state;\n\n    if (!clicked) {\n      target.id = 'clicked-one';\n      this.setState({ clicked: true });\n      clearInterval(this.gameTimer);\n    }\n\n    if (target.classList.contains('correct')) this.handlePontuation();\n  }\n\n  handleAnimations() {\n    const questionCard = document.querySelector('.question-card');\n    const answersContainer = document.querySelector('.answers-container');\n\n    questionCard.style.display = 'none';\n    answersContainer.style.display = 'none';\n\n    setTimeout(() => {\n      questionCard.style.display = 'block';\n      answersContainer.style.display = 'flex';\n    }, 100);\n\n    const clickedOne = document.querySelector('#clicked-one');\n    clickedOne.removeAttribute('id');\n  }\n\n  handleNextQuestion() {\n    const { counter } = this.state;\n    const { history, triviaReturn: { results } } = this.props;\n\n    if (counter === results.length - 1) history.push('/feedback');\n    this.handleAnimations();\n\n    this.setState((prevState) => ({\n      counter: prevState.counter + 1,\n      clicked: false,\n    }));\n\n    clearInterval(this.gameTimer);\n    this.handleQuestionTimer();\n  }\n\n  render() {\n    const { counter, timer, answers, state, clicked } = this.state;\n    const { triviaReturn: { results } } = this.props;\n    return (\n      <section>\n        <Header score={ state.player.score } />\n        <section className=\"content-container\">\n          <QuestionCard results={ results ? results[counter] : {} } />\n          <Answers\n            clicked={ clicked }\n            answers={ answers[counter] }\n            disabled={ timer === 0 || clicked }\n            onClick={ this.handleAnswerClick }\n          />\n        </section>\n        <section className=\"bottom-container\">\n          <div className=\"timer-container\">\n            {results && <progress\n              className=\"game-process\"\n              value={ timer }\n              max={ 30 }\n            />}\n            { timer <= 1 ? `Tempo restante: ${timer} segundo`\n              : `Tempo restante: ${timer} segundos` }\n          </div>\n          <button\n            type=\"button\"\n            className={ `next-question-btn ${(timer === 0 || clicked) && 'visible'}` }\n            data-testid=\"btn-next\"\n            onClick={ this.handleNextQuestion }\n          >\n            Próxima\n          </button>\n        </section>\n      </section>\n    );\n  }\n}\n\nGame.propTypes = {\n  triviaApi: PropTypes.func.isRequired,\n  triviaReturn: PropTypes.shape({\n    response_code: PropTypes.number,\n    results: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  tokenAPI: () => dispatch(fetchToken()),\n  triviaApi: async () => dispatch(await fetchTriviaQuestions()),\n});\n\nconst mapStateToProps = (state) => ({\n  triviaReturn: state.gameReducer.triviaReturn,\n  email: state.loginReducer.email,\n  name: state.loginReducer.name,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport '../styles/Card.css';\n\nexport default class Card extends Component {\n  render() {\n    const { title, children } = this.props;\n    return (\n      <div className=\"card-container\">\n        <div className=\"card-header\">\n          <h2>{title}</h2>\n        </div>\n        <div className=\"card-body\">{children}</div>\n      </div>\n    );\n  }\n}\n\nCard.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport '../styles/Feedback.css';\nimport starIcon from '../images/star-solid.svg';\nimport starIconBlack from '../images/star-solid-black.svg';\nimport Card from '../components/Card';\nimport { connect } from 'react-redux';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      state: {\n        player: {\n          assertions: 0,\n          score: 0,\n        },\n      },\n    };\n\n    this.getState = this.getState.bind(this);\n    this.getStars = this.getStars.bind(this);\n  }\n\n  componentDidMount() {\n    this.getState();\n  }\n\n  getState() {\n    const state = JSON.parse(localStorage.getItem('state'));\n    this.setState({ state });\n  }\n\n  getStars() {\n    const { state: { player: { assertions } } } = this.state;\n    const { amount } = this.props;\n    const starsAmount = Math.floor(assertions / (amount / 5));\n    console.log({ amount, starsAmount });\n    const starsArray = new Array(5)\n      .fill(<img src={ starIcon } alt=\"Star Icon\" className=\"star\" />, 0, starsAmount)\n      .fill(<img src={ starIconBlack } alt=\"Star Icon Black\" className=\"star\" />, starsAmount);\n    return starsArray;\n  }\n\n  render() {\n    const { state } = this.state;\n    const three = 3;\n    return (\n      <>\n        <Header score={ state.player.score } />\n        <Card title=\"Resultado\">\n          <span className=\"feedback-total-score\">\n            { state.player.score }\n          </span>\n          <div className=\"stars\">{this.getStars()}</div>\n          { state.player.assertions > 0 ? (\n            <p>\n              Você acertou\n              <span className=\"feedback-total-question\">\n                { ` ${state.player.assertions} ` }\n              </span>\n              { state.player.assertions > 1 ? 'perguntas' : 'pergunta' }\n            </p>\n          ) : 'Você não acertou nenhuma questão :('}\n          <p\n            className=\"feedback-text\"\n          >\n            { state.player.assertions >= three ? 'Mandou bem! 🎉' : 'Podia ser melhor...'}\n          </p>\n          <Link to=\"/game\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              className=\"btn-play\"\n            >\n              Play again!\n            </button>\n          </Link>\n        </Card>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  amount: state.gameReducer.gameOptions.amount,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","const categories = [\n  { id: 9, name: 'General Knowledge' },\n  { id: 10, name: 'Entertainment: Books' },\n  { id: 11, name: 'Entertainment: Film' },\n  { id: 12, name: 'Entertainment: Music' },\n  { id: 13, name: 'Entertainment: Musicals &a Theatres' },\n  { id: 14, name: 'Entertainment: Television' },\n  { id: 15, name: 'Entertainment: Video Games' },\n  { id: 16, name: 'Entertainment: Board Games' },\n  { id: 17, name: 'Science & Nature' },\n  { id: 18, name: 'Science: Computers' },\n  { id: 19, name: 'Science: Mathematics' },\n  { id: 20, name: 'Mythology' },\n  { id: 21, name: 'Sports' },\n  { id: 22, name: 'Geography' },\n  { id: 23, name: 'History' },\n  { id: 24, name: 'Politics' },\n  { id: 25, name: 'Art' },\n  { id: 26, name: 'Celebrities' },\n  { id: 27, name: 'Animals' },\n  { id: 28, name: 'Vehicles' },\n  { id: 29, name: 'Entertainment: Comics' },\n  { id: 30, name: 'Science: Gadgets' },\n  { id: 31, name: 'Entertainment: Japanese Anime & Manga' },\n  { id: 32, name: 'Entertainment: Cartoon & Animations' },\n];\n\nexport { categories };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Card from '../components/Card';\nimport logo from '../images/trivia.png';\nimport { categories } from '../data';\nimport { fetchToken, fetchTriviaQuestions, setOptions } from '../actions';\nimport '../styles/NewGame.css';\n\nclass NewGame extends Component {\n  constructor() {\n    super();\n    this.state = {\n      amount: 5,\n      difficulty: 'easy',\n      category: 'any',\n      type: 'multiple',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.toPlay = this.toPlay.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  async toPlay() {\n    const { amount, difficulty, category, type } = this.state;\n    const { triviaApi, tokenAPI, history, setGameOptions } = this.props;\n    const options = { amount, difficulty, category, type };\n    await tokenAPI();\n    await triviaApi(options);\n    setGameOptions(options);\n    history.push('/game');\n  }\n\n  render() {\n    const { amount, difficulty, category, type } = this.state;\n    return (\n      <main>\n        <section className=\"top-container\">\n          <img className=\"trivia-logo\" src={ logo } alt=\"Trivia Logo\" />\n        </section>\n        <section className=\"content-container new-game-page\">\n          <Card title=\"Novo jogo\">\n            <label htmlFor=\"amount\">\n              Numero de questões:\n              <select id=\"question-amount\" name=\"amount\" value={ amount } onChange={ this.handleChange }>\n                <option value={ 5 }>5</option>\n                <option value={ 10 }>10</option>\n                <option value={ 15 }>15</option>\n              </select>\n            </label>\n            <label htmlFor=\"difficulty\">\n              Dificuldade:\n              <select id=\"difficulty\" name=\"difficulty\" onChange={ this.handleChange } value={ difficulty }>\n                <option value=\"easy\">Fácil</option>\n                <option value=\"medium\">Intermediário</option>\n                <option value=\"hard\">Difícil</option>\n              </select>\n            </label>\n            <label htmlFor=\"category\">\n              Categoria:\n              <select name=\"category\" id=\"category\" onChange={ this.handleChange } value={ category }>\n                <option value=\"any\">Qualquer Categoria</option>\n                { categories.map(({ id, name }) => <option value={ id } key={ id }>{name}</option>)}\n              </select>\n            </label>\n            <label htmlFor=\"type\" name=\"type\">\n              <span>Tipo:</span>\n              <label htmlFor=\"multiple-choice\" onChange={ this.handleChange }>\n                Múltipla Escolha\n                <input\n                  id=\"multiple-choice\"\n                  type=\"radio\"\n                  value=\"multiple\"\n                  name=\"type\"\n                  checked={ type === 'multiple' }\n                />\n              </label>\n              <label htmlFor=\"true-false\" onChange={ this.handleChange }>\n                Verdadeiro ou Falso\n                <input\n                  id=\"true-false\"\n                  type=\"radio\"\n                  value=\"boolean\"\n                  name=\"type\"\n                  checked={ type === 'boolean' }\n                />\n              </label>\n            </label>\n            <button className=\"btn-play\" onClick={ this.toPlay }>Jogar!</button>\n          </Card>\n        </section>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  tokenAPI: () => dispatch(fetchToken()),\n  triviaApi: (options) => dispatch(fetchTriviaQuestions(options)),\n  setGameOptions: (options) => dispatch(setOptions(options)),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.tokenReducer.token,\n});\n\nNewGame.propTypes = {\n  tokenAPI: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewGame);\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport NewGame from './pages/NewGame';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        render={ (routeProps) => {\n          const isLogged = localStorage.getItem('trivia-user') !== null;\n          return isLogged ? <Redirect to=\"/newgame\" /> : <Login { ...routeProps } />;\n        } }\n      />\n      <Route path=\"/newgame\" component={ NewGame } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/feedback\" component={ Feedback } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"trivia-redux\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change.\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}